// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kardolus/chatgpt-cli/history (interfaces: Store)

// Package history_test is a generated GoMock package.
package history_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	history "github.com/kardolus/chatgpt-cli/history"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetThread mocks base method.
func (m *MockStore) GetThread() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThread")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetThread indicates an expected call of GetThread.
func (mr *MockStoreMockRecorder) GetThread() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThread", reflect.TypeOf((*MockStore)(nil).GetThread))
}

// Read mocks base method.
func (m *MockStore) Read() ([]history.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]history.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockStoreMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStore)(nil).Read))
}

// ReadThread mocks base method.
func (m *MockStore) ReadThread(arg0 string) ([]history.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadThread", arg0)
	ret0, _ := ret[0].([]history.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadThread indicates an expected call of ReadThread.
func (mr *MockStoreMockRecorder) ReadThread(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadThread", reflect.TypeOf((*MockStore)(nil).ReadThread), arg0)
}

// SetThread mocks base method.
func (m *MockStore) SetThread(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetThread", arg0)
}

// SetThread indicates an expected call of SetThread.
func (mr *MockStoreMockRecorder) SetThread(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetThread", reflect.TypeOf((*MockStore)(nil).SetThread), arg0)
}

// Write mocks base method.
func (m *MockStore) Write(arg0 []history.History) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockStoreMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStore)(nil).Write), arg0)
}
