// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kardolus/chatgpt-cli/api/client (interfaces: ImageReader)

// Package client_test is a generated GoMock package.
package client_test

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImageReader is a mock of ImageReader interface.
type MockImageReader struct {
	ctrl     *gomock.Controller
	recorder *MockImageReaderMockRecorder
}

// MockImageReaderMockRecorder is the mock recorder for MockImageReader.
type MockImageReaderMockRecorder struct {
	mock *MockImageReader
}

// NewMockImageReader creates a new mock instance.
func NewMockImageReader(ctrl *gomock.Controller) *MockImageReader {
	mock := &MockImageReader{ctrl: ctrl}
	mock.recorder = &MockImageReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageReader) EXPECT() *MockImageReaderMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockImageReader) Open(arg0 string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockImageReaderMockRecorder) Open(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockImageReader)(nil).Open), arg0)
}

// ReadBufferFromFile mocks base method.
func (m *MockImageReader) ReadBufferFromFile(arg0 *os.File) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBufferFromFile", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBufferFromFile indicates an expected call of ReadBufferFromFile.
func (mr *MockImageReaderMockRecorder) ReadBufferFromFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBufferFromFile", reflect.TypeOf((*MockImageReader)(nil).ReadBufferFromFile), arg0)
}

// ReadFile mocks base method.
func (m *MockImageReader) ReadFile(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockImageReaderMockRecorder) ReadFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockImageReader)(nil).ReadFile), arg0)
}
